rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {

    match /rooms/{roomId} {
      allow get: if isAccessAllowed(request);
      allow list: if request.auth.uid in resource.data.memberIds;
      allow update: if request.auth != null;
      allow delete: if false;
      allow create: if request.auth != null;

      function isAccessAllowed(request) {
        let isPasswordProtected = isPasswordProtected();
        
        let roomAccessValue = 'roomAccess' in request.auth.token ? request.auth.token.roomAccess[roomId] : {};
        let isExpired = 'expiresAt' in roomAccessValue ? roomAccessValue.expiresAt._seconds < request.time.seconds() : false;
        let isHashMatching = 'hash' in roomAccessValue ? roomAccessValue.hash == getPasswordHash() : false;
      
        return request.auth != null && (
          !isPasswordProtected || 
          (
            isPasswordProtected && 
            !isExpired &&
            isHashMatching
          )
        );
      }

      function isPasswordProtected() {
        return exists(/databases/$(database)/documents/rooms/$(roomId)/metadata/authorization) &&
         get(/databases/$(database)/documents/rooms/$(roomId)/metadata/authorization).data.passwordProtectionEnabled;
      }
    
      function getRoom() {
        return get(/databases/$(database)/documents/rooms/$(roomId));
      }

      function getPasswordHash() {
        return exists(/databases/$(database)/documents/rooms/$(roomId)/metadata/passwordProtection) ? 
        get(/databases/$(database)/documents/rooms/$(roomId)/metadata/passwordProtection).data.value : '';
      }

      // TODO this needs improvement!
      match /metadata/authorization {
        allow write: if request.auth.uid == getRoom().data.createdById;
        allow read: if true;
      }

      match /metadata/passwordProtection {
        allow write: if false;
        allow read: if isAccessAllowed(request);
      }
    }

    match /userDetails/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /userProfiles/{userId} {
      allow get: if true;
      allow list, update, create, delete: if false;
    }
    
    match /invitations/{invitationId} {
      allow write: if request.auth.uid == request.resource.data.invitedBy;
      allow read: if false;
    }

    match /authSessions/{sessionId} {
      allow list, update, delete, create, get: if false;
    }

     match /feedbacks/{feedbackId} {
      allow write, read: if request.auth.uid == request.resource.data.userId;
    }
  }
}